# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend
#   namespace: expense
#   # labels of deployment resource
#   labels:
#     app: frontend
#     tier: web
#     project: expense    
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: frontend
#       tier: web
#       project: expense
#   template:
#     metadata:
#       labels:
#         app: frontend
#         tier: web
#         project: expense
#     spec:
#        volumes:
#        - name: nginx
#          configMap:
#           name: nginx
#           items:
#             - key: nginx.conf
#               path: nginx.conf 
         
#     containers:
#           - name: nginx
#             image: bhavyasomisetti/frontend:1.1.0
#             resources:
#           # soft limit
#             requests:
#             memory: "68Mi"
#             cpu: "100m"
#           # hard limit
#             limits:
#             memory: "128Mi"
#             cpu: "150m"
#             ports:
#           - containerPort: 8080
#             volumeMounts:
#           - name: nginx
#             mountPath: /etc/nginx/nginx.conf
#             subPath: nginx.conf
#             readOnly: true

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: expense
  labels:
    app: frontend
    tier: web
    project: expense
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
      tier: web
      project: expense
  template:
    metadata:
      labels:
        app: frontend
        tier: web
        project: expense
    spec:
      volumes:
      - name: nginx
        configMap:
          name: nginx
          items:
            - key: nginx.conf
              path: nginx.conf
      - name: targetgroup-volume
        emptyDir: {}  # Empty directory volume for storing the target group YAML

      initContainers:
      - name: fetch-parameter-store
        image: bitnami/aws-cli:latest
        command:
          - /bin/sh
          - -c
          - |
            # Fetch ARN from AWS SSM Parameter Store
            echo "Fetching ARN from AWS SSM Parameter Store..."
            TG_ARN=$(aws ssm get-parameter \
              --name "/expense/dev/aws_lb_target_group_arn" \
              --with-decryption \
              --query "Parameter.Value" \
              --output text)
            
            # Check if ARN retrieval was successful
            if [ -z "$TG_ARN" ]; then
              echo "Error: Failed to retrieve ARN from SSM."
              exit 1
            fi
            echo "Successfully fetched ARN: $TG_ARN"
            # Create the TargetGroupBinding YAML template with the fetched ARN
            cat <<EOF > /tmp/targetgroup-volume/target-group.yaml
            apiVersion: elbv2.k8s.aws/v1beta1
            kind: TargetGroupBinding
            metadata:
                  name: frontend
                  namespace: expense
            spec:
              serviceRef:
                    name: frontend # route traffic to the frontend service
                    port: 80
              targetGroupARN: ${TG_ARN}
            EOF

            echo "Applied TargetGroupBinding successfully to the Kubernetes cluster."
            kubectl apply -f /tmp/targetgroup-volume/target-group.yaml
            
        resources:
            limits:
                memory: "64Mi"
                cpu: "50m"
            requests:
                memory: "32Mi"
                cpu: "20m"
        volumeMounts:
              - name: targetgroup-volume
                mountPath: /tmp/targetgroup-volume
                readOnly: false
      # env:
      #   - name: AWS_REGION
      #     value: us-east-1
      #   - name: AWS_ACCESS_KEY_ID
      #     valueFrom:
      #       secretKeyRef:
      #         name: aws-credentials
      #         key: aws_access_key_id
      #   - name: AWS_SECRET_ACCESS_KEY
      #     valueFrom:
      #       secretKeyRef:
      #         name: aws-credentials
      #         key: aws_secret_access_key
      containers:
      - name: nginx
        image: bhavyasomisetti/frontend:1.1.0
        resources:
          # Soft limit
          requests:
            memory: "68Mi"
            cpu: "100m"
          # Hard limit
          limits:
            memory: "128Mi"
            cpu: "150m"
        ports:
          - containerPort: 8080
        volumeMounts:
          - name: nginx
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true

